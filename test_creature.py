
"""

test_creature.py 

Testing functionality of Creature and Motor classes. 
A series of unit tests using the unittest framework to validate the functionality of the Creature and 
Motor classes within the creature module, assuming their existence.

These tests ensure that the Creature and Motor classes perform as expected in various scenarios, 
verifying their correctness and reliability.
"""
import unittest
import creature  # Assuming this is a module containing Creature and Motor classes
import pybullet as p

class TestCreature(unittest.TestCase):
    """
    Test cases for the Creature and Motor classes.
    """

    def testCreatExists(self):
        """
        Test if the Creature class exists.
        """
        self.assertIsNotNone(creature.Creature)

    def testCreatureGetFlatLinks(self):
        """
        Test the get_flat_links method of Creature.
        """
        c = creature.Creature(gene_count=4)
        links = c.get_flat_links()
        self.assertEqual(len(links), 4)

    def testExpLinks(self):
        """
        Test the get_expanded_links method of Creature.
        """
        c = creature.Creature(gene_count=25)
        links = c.get_flat_links()
        exp_links = c.get_expanded_links()
        self.assertGreaterEqual(len(exp_links), len(links))

    def testToXMLNotNone(self):
        """
        Test if the to_xml method of Creature returns a non-None value.
        """
        c = creature.Creature(gene_count=2)
        xml_str = c.to_xml()
        self.assertIsNotNone(xml_str)

    def testLoadXML(self):
        """
        Test loading a URDF file generated by Creature.
        """
        c = creature.Creature(gene_count=20)
        xml_str = c.to_xml()
        with open('test.urdf', 'w') as f:
            f.write(xml_str)
        p.connect(p.DIRECT)
        cid = p.loadURDF('test.urdf')
        self.assertIsNotNone(cid)

    def testMotor(self):
        """
        Test creation of a Motor object.
        """
        m = creature.Motor(0.1, 0.5, 0.5)
        self.assertIsNotNone(m)

    def testMotorVal(self):
        """
        Test the get_output method of Motor when maximum inputs are given.
        """
        m = creature.Motor(0.1, 0.5, 0.5)
        self.assertEqual(m.get_output(), 1)

    def testMotorVal2(self):
        """
        Test the get_output method of Motor when input values exceed limits.
        """
        m = creature.Motor(0.6, 0.5, 0.5)
        m.get_output()
        m.get_output()  # Ensure we call get_output twice to cover behavior
        self.assertGreater(m.get_output(), 0)

    def testDist(self):
        """
        Test the distance calculation in Creature after position updates.
        """
        c = creature.Creature(3)
        c.update_position((0, 0, 0))
        d1 = c.get_distance_travelled()
        c.update_position((1, 1, 1))
        d2 = c.get_distance_travelled()
        self.assertGreater(d2, d1)

    def get_total_vertical_distance_travelled(self):
        """
        Test the vertical distance travelled.
        """
        c = creature.Creature(3)
        c.update_position((0, 0, 0))
        d1 = c.get_total_vertical_distance_travelled()
        c.update_position((1, 1, 1))
        d2 = c.get_total_vertical_distance_travelled()
        self.assertGreater(d2, d1)


# Run all the test cases when the script is executed
unittest.main()

